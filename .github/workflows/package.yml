name: Packaging and test

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/package.yml"
      - "MANIFEST.in"
      - "pyproject.toml"
      - "examples/**"
      - "channel-rust-stable.toml"
      - "setup.py"
      - "setuptools_rust_bundled/**"
    tags:
      - "v*.*.*"

jobs:
  build-sdist:
    name: üßë‚Äçüç≥ sdist
    runs-on: "ubuntu-latest"
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: "3.11"

      - run: |
          python -m pip install --upgrade pip
          python -m pip install wheel
          python setup.py sdist

      - uses: actions/upload-artifact@v4
        with:
          name: setuptools_rust_bundled_sdist
          path: dist/*
          if-no-files-found: error
          overwrite: true

  test-sdist:
    name: üìã sdist
    needs: [build-sdist]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-13
          - macos-latest
          - ubuntu-24.04-arm
        python-version: [ "11" ]
        kind:
          - setuptools
          - maturin
    defaults:
      run:
        shell: bash
    env:
      # Needed to avoid format error in Windows
      PYTHONUTF8: "1"
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: "3.${{ matrix.python-version }}"

      - uses: actions/download-artifact@v4
        with:
          name: setuptools_rust_bundled_sdist
          path: dist

      - name: setup environment
        run: |
          [[ "${{ runner.os }}" = "Windows" ]] && python -X utf8 script.py || true
          yes | rustup self uninstall || true
          python -m pip install --upgrade pip
          if [ ${{ matrix.kind }} = "setuptools" ]; then
            python -m pip install wheel setuptools setuptools-rust
          else
            python -m pip install wheel maturin
          fi
          rm -rf setuptools_rust_bundled

      - name: installing setuptools-rust-bundled
        run: python -m pip install -v dist/*

      - name: installing example
        run: python -m pip install --no-build-isolation -v ./examples/${{ matrix.kind }}
      
      - name: executing
        run: |
          python -c "import example; assert example.get_value() == 123"

  build-bdist:
    name: üßë‚Äçüç≥ bdist
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false
      matrix:
        plats:
          - manylinux-2_17-i686
          - manylinux-2_17-x86_64
          - manylinux-2_17-aarch64
          - manylinux-2_17-riscv64
          - manylinux-2_17-armv7l
          - manylinux-2_17-ppc64le
          - manylinux-2_17-s390x
          - macosx-11_0-arm64
          - macosx-10_12-x86_64
          - win-amd64
          - win-arm64
          - freebsd-14_2_release-amd64
          - netbsd-10_1-amd64
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: "3.11"

      - run: |
          python -m pip install --upgrade pip
          python -m pip install wheel setuptools requests tomli
          python setup.py bdist_wheel -p ${{ matrix.plats }}

      - uses: actions/upload-artifact@v4
        with:
          name: setuptools_rust_bundled_bdist-${{ matrix.plats }}
          path: dist/*
          if-no-files-found: error
          overwrite: true

  test-bdist:
    name: üìã bdist
    needs: [build-bdist]
    runs-on: ${{ matrix.system.os }}
    strategy:
      fail-fast: false
      matrix:
        system:
          - os: ubuntu-latest
            plats: manylinux-2_17-x86_64
          - os: macos-13
            plats: macosx-10_12-x86_64
          - os: macos-latest
            plats: macosx-11_0-arm64
          - os: ubuntu-24.04-arm
            plats: manylinux-2_17-aarch64
          - os: windows-latest
            plats: win-amd64
          - os: windows-11-arm
            plats: win-arm64
        kind:
          - setuptools
          - maturin
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: "3.11"

      - uses: actions/download-artifact@v4
        with:
          name: setuptools_rust_bundled_bdist-${{ matrix.system.plats }}
          path: dist

      - name: setup environment
        run: |
          [[ "${{ runner.os }}" = "Windows" ]] && python -X utf8 script.py || true
          yes | rustup self uninstall || true
          python -m pip install --upgrade pip
          if [ ${{ matrix.kind }} = "setuptools" ]; then
            python -m pip install wheel setuptools setuptools-rust
          else
            python -m pip install wheel maturin
          fi
          rm -rf setuptools_rust_bundled

      - name: installing setuptools-rust-bundled
        run: python -m pip install -v dist/*

      - name: installing example
        run: |
          cd ./examples/${{ matrix.kind }}
          python -m pip install --no-build-isolation -v .
          cd ../..
      
      - name: executing
        run: |
          python -c "import example; assert example.get_value() == 123"
  test-bdist-bsd:
    name: üìã bdist (bsd)
    needs: [build-bdist]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        system:
          - os: freebsd
            os_ver: 14.2
            arch: x86-64
            plats: freebsd-14_2_release-amd64
            pkg_cmd: yes | sudo pkg install
          - os: netbsd
            os_ver: 10.1
            arch: x86-64
            plats: netbsd-10_1-amd64
            pkg_cmd: sudo pkgin -y install
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: setuptools_rust_bundled_bdist-${{ matrix.system.plats }}
          path: dist

      - name: Run cross platform action
        uses: cross-platform-actions/action@v0.27.0
        with:
          operating_system: ${{ matrix.system.os}}
          architecture: ${{ matrix.system.arch }}
          version: ${{ matrix.system.os_ver }}
          shell: bash
          run: |
            ${{ matrix.system.pkg_cmd}} python311 py311-pip
            python3.11 -m pip install --upgrade pip
            python3.11 -m pip install wheel setuptools setuptools-rust
            rm -rf setuptools_rust_bundled
            python3.11 -m pip install --user -v dist/*
            cd ./examples/setuptools
            python3.11 -m pip install --no-build-isolation -v .
            cd ../..
            python3.11 -c "import example; assert example.get_value() == 123"

  test-bdist-docker:
    name: üìã bdist (docker)
    needs: [build-bdist]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        system:
          - platform: linux/s390x
            plats: manylinux-2_17-s390x
            image: debian:unstable-slim
          - platform: linux/riscv64
            plats: manylinux-2_17-riscv64
            image: debian:unstable-slim
          - platform: linux/arm/v7
            plats: manylinux-2_17-armv7l
            image: debian:unstable-slim
          - platform: linux/ppc64le
            plats: manylinux-2_17-ppc64le
            image: debian:unstable-slim
        kind:
          - setuptools
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: setuptools_rust_bundled_bdist-${{ matrix.system.plats }}
          path: dist

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.system.platform }}

      - name: Run Command in Docker
        run: |
          docker run \
            --rm \
            -v $(pwd):/${{ github.workspace }} \
            -w ${{ github.workspace }} \
            --platform ${{ matrix.system.platform }} \
            ${{ matrix.system.image }} \
            bash -c "apt-get update && apt-get -y install python3 python3-dev python3-venv python3-pip && python3 -m venv ./venv && ./venv/bin/python3 -m pip install -U pip wheel setuptools setuptools-rust dist/* && cd ./examples/setuptools && ../../venv/bin/python3 -m pip install --no-build-isolation -v . && cd ../.. && ./venv/bin/python3 -c \"import example; assert example.get_value() == 123\" "
  merge:
    needs: [build-sdist, build-bdist]
    runs-on: ubuntu-latest
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: setuptools_rust_bundled
          pattern: setuptools_rust_bundled_*

  release-pypi:
    needs: [build-sdist, test-sdist, test-bdist, test-bdist-bsd, test-bdist-docker]
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: setuptools_rust_bundled_sdist

      - name: Install Twine
        run: python -m pip install twine==6.1.0 packaging==24.2

      - name: Release to PyPI
        run: |
          COUNTER=0
          for f in *; do
            echo "Checking $f"
            if ! python -m twine check $f; then
              COUNTER=$((COUNTER + 1))
            fi
          done
          [[ $COUNTER = 0 ]] && python -m twine upload *
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.TWINE_API_TOKEN }}

  release-gh-actions:
    needs: [merge, test-sdist, test-bdist, test-bdist-bsd, test-bdist-docker]
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: setuptools_rust_bundled

      - uses: softprops/action-gh-release@v1
        with:
          files: |
            *.tar.gz
            *.whl
          draft: true
          prerelease: false
